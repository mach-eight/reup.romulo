//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.reup.romulo/Runtime/Inputs/AppInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AppInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AppInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AppInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e802d882-c0c7-4181-8e8a-98ee0a1d31b6"",
            ""actions"": [
                {
                    ""name"": ""RotateView"",
                    ""type"": ""Value"",
                    ""id"": ""bcff9012-19bb-47e0-b5f0-c22d224031c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateViewKeyborad"",
                    ""type"": ""Button"",
                    ""id"": ""9d5202b1-f2ba-4ed6-b80c-e60943ebd3fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7ef3b963-4e50-4b26-9575-c7358f576d52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""0cf5327d-1f71-414b-ba75-ccf345bda25c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b0e1ebbd-c551-4318-a0b7-472e7499937e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""fa5ebd44-1144-43eb-a323-b9ce37fa43ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeHeight"",
                    ""type"": ""Value"",
                    ""id"": ""2d42ce9a-959b-4302-9393-88cf408eb893"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9efac98a-919e-40e3-bdb0-d34ca51c61b2"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.2,y=0.2)"",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a9c1e8-d5d5-4fc0-8c68-89843672807f"",
                    ""path"": ""<Pen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79812bdb-eca7-4e2d-b977-9cd0f507ddaf"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7209ec38-8250-437e-998a-dbd77063f3ff"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""690d2d1d-b28e-4c53-8fcf-b2fd782c395a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""arrows"",
                    ""id"": ""f1f16253-6b30-4fcf-a8a3-0557c1fbedf2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a98335bb-a8ae-49b8-9ab8-20fda96fb615"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f3d1af1-6995-434d-bf48-3bcfa566489d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""wasd"",
                    ""id"": ""d111dde3-9997-4806-bbb6-70824107c680"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6933eb39-19a2-47e6-a606-1d96d3bd3e01"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""805eff14-9233-41a3-91c3-e2037ec14a8c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50c6aee5-6aa3-4d1f-9325-1f2e60d9a871"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c5e50053-b5ae-4c27-ab04-4473789df490"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""92d8b3a2-731a-4c82-b3bd-f0aaf9811666"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc02bb05-f6bc-4c04-b81f-09e76ba0eadd"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df59acf7-5825-4c96-9019-1083cd30e72f"",
                    ""path"": ""<Pen>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ed6589d-77e6-43a8-9c7a-6614781abb7b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a507e70-ff3a-42a5-b736-6bc436865ed5"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyboardArrows"",
                    ""id"": ""4afb87d2-9162-4f50-a669-0e1f74564d7a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateViewKeyborad"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c9d3e362-2f1b-46a2-93d4-554d7dfc7e7c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateViewKeyborad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d4168b13-e470-4793-babc-283529443427"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RotateViewKeyborad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""QE_keys"",
                    ""id"": ""4fb79599-dd72-49eb-947d-ade008833463"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a1d6652a-ce1c-409e-945f-73e3451808a7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7ea62665-edf5-4228-8752-0aeacff733fd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHeight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DollhouseView"",
            ""id"": ""7eff1063-e733-49a9-86c8-cd345c4d3b41"",
            ""actions"": [
                {
                    ""name"": ""KeyboardMoveCamera"",
                    ""type"": ""Button"",
                    ""id"": ""0911c579-a2b7-4be7-876f-94d6d150bee6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheelZoom"",
                    ""type"": ""Value"",
                    ""id"": ""af634b69-5c62-4466-9137-f1d5c9c87534"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""1874cd2b-cf4e-4705-a6d6-c50825d6857a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b873bde-276a-4ecd-b240-0d2156f018b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""KeyboardMoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c637b318-ad43-4169-9e78-00416a0a7914"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""KeyboardMoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""760aad25-c045-4f90-bd1a-c643e9be8331"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""KeyboardMoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6bf035ad-f529-48ba-8a4f-f084b8cb30e1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""KeyboardMoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ae8218fb-ca9e-488b-9905-7dcb0ff88676"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ScrollWheelZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MultiTouch"",
            ""id"": ""b0e97067-6625-41ce-bda2-5ee62f05679e"",
            ""actions"": [
                {
                    ""name"": ""Touch1Hold"",
                    ""type"": ""Button"",
                    ""id"": ""106b9b19-699b-419d-8cec-b2a727f82e0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch2Hold"",
                    ""type"": ""Button"",
                    ""id"": ""e11880a2-c565-4107-b367-12be984842b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""Value"",
                    ""id"": ""d2788169-8c85-46fa-9e21-79dd05621c2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch2Position"",
                    ""type"": ""Value"",
                    ""id"": ""422b7f31-d6ca-49b5-8aa2-ccf9a823b3e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4437d2c-189d-4322-b1c1-462ceb8da3f0"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch2Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a97f2fcc-06fc-491e-a908-a711ff6ea45b"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch1Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25fcfbef-f338-47f3-b9f7-c892516da780"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2ba7da2-f550-4a58-bfaf-c8e9fefc63cc"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Touch2Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_RotateView = m_Player.FindAction("RotateView", throwIfNotFound: true);
        m_Player_RotateViewKeyborad = m_Player.FindAction("RotateViewKeyborad", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Select = m_Player.FindAction("Select", throwIfNotFound: true);
        m_Player_Pointer = m_Player.FindAction("Pointer", throwIfNotFound: true);
        m_Player_Hold = m_Player.FindAction("Hold", throwIfNotFound: true);
        m_Player_ChangeHeight = m_Player.FindAction("ChangeHeight", throwIfNotFound: true);
        // DollhouseView
        m_DollhouseView = asset.FindActionMap("DollhouseView", throwIfNotFound: true);
        m_DollhouseView_KeyboardMoveCamera = m_DollhouseView.FindAction("KeyboardMoveCamera", throwIfNotFound: true);
        m_DollhouseView_ScrollWheelZoom = m_DollhouseView.FindAction("ScrollWheelZoom", throwIfNotFound: true);
        // MultiTouch
        m_MultiTouch = asset.FindActionMap("MultiTouch", throwIfNotFound: true);
        m_MultiTouch_Touch1Hold = m_MultiTouch.FindAction("Touch1Hold", throwIfNotFound: true);
        m_MultiTouch_Touch2Hold = m_MultiTouch.FindAction("Touch2Hold", throwIfNotFound: true);
        m_MultiTouch_Touch1Position = m_MultiTouch.FindAction("Touch1Position", throwIfNotFound: true);
        m_MultiTouch_Touch2Position = m_MultiTouch.FindAction("Touch2Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_RotateView;
    private readonly InputAction m_Player_RotateViewKeyborad;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Select;
    private readonly InputAction m_Player_Pointer;
    private readonly InputAction m_Player_Hold;
    private readonly InputAction m_Player_ChangeHeight;
    public struct PlayerActions
    {
        private @AppInputActions m_Wrapper;
        public PlayerActions(@AppInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateView => m_Wrapper.m_Player_RotateView;
        public InputAction @RotateViewKeyborad => m_Wrapper.m_Player_RotateViewKeyborad;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Select => m_Wrapper.m_Player_Select;
        public InputAction @Pointer => m_Wrapper.m_Player_Pointer;
        public InputAction @Hold => m_Wrapper.m_Player_Hold;
        public InputAction @ChangeHeight => m_Wrapper.m_Player_ChangeHeight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @RotateView.started += instance.OnRotateView;
            @RotateView.performed += instance.OnRotateView;
            @RotateView.canceled += instance.OnRotateView;
            @RotateViewKeyborad.started += instance.OnRotateViewKeyborad;
            @RotateViewKeyborad.performed += instance.OnRotateViewKeyborad;
            @RotateViewKeyborad.canceled += instance.OnRotateViewKeyborad;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @ChangeHeight.started += instance.OnChangeHeight;
            @ChangeHeight.performed += instance.OnChangeHeight;
            @ChangeHeight.canceled += instance.OnChangeHeight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @RotateView.started -= instance.OnRotateView;
            @RotateView.performed -= instance.OnRotateView;
            @RotateView.canceled -= instance.OnRotateView;
            @RotateViewKeyborad.started -= instance.OnRotateViewKeyborad;
            @RotateViewKeyborad.performed -= instance.OnRotateViewKeyborad;
            @RotateViewKeyborad.canceled -= instance.OnRotateViewKeyborad;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @ChangeHeight.started -= instance.OnChangeHeight;
            @ChangeHeight.performed -= instance.OnChangeHeight;
            @ChangeHeight.canceled -= instance.OnChangeHeight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // DollhouseView
    private readonly InputActionMap m_DollhouseView;
    private List<IDollhouseViewActions> m_DollhouseViewActionsCallbackInterfaces = new List<IDollhouseViewActions>();
    private readonly InputAction m_DollhouseView_KeyboardMoveCamera;
    private readonly InputAction m_DollhouseView_ScrollWheelZoom;
    public struct DollhouseViewActions
    {
        private @AppInputActions m_Wrapper;
        public DollhouseViewActions(@AppInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardMoveCamera => m_Wrapper.m_DollhouseView_KeyboardMoveCamera;
        public InputAction @ScrollWheelZoom => m_Wrapper.m_DollhouseView_ScrollWheelZoom;
        public InputActionMap Get() { return m_Wrapper.m_DollhouseView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DollhouseViewActions set) { return set.Get(); }
        public void AddCallbacks(IDollhouseViewActions instance)
        {
            if (instance == null || m_Wrapper.m_DollhouseViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DollhouseViewActionsCallbackInterfaces.Add(instance);
            @KeyboardMoveCamera.started += instance.OnKeyboardMoveCamera;
            @KeyboardMoveCamera.performed += instance.OnKeyboardMoveCamera;
            @KeyboardMoveCamera.canceled += instance.OnKeyboardMoveCamera;
            @ScrollWheelZoom.started += instance.OnScrollWheelZoom;
            @ScrollWheelZoom.performed += instance.OnScrollWheelZoom;
            @ScrollWheelZoom.canceled += instance.OnScrollWheelZoom;
        }

        private void UnregisterCallbacks(IDollhouseViewActions instance)
        {
            @KeyboardMoveCamera.started -= instance.OnKeyboardMoveCamera;
            @KeyboardMoveCamera.performed -= instance.OnKeyboardMoveCamera;
            @KeyboardMoveCamera.canceled -= instance.OnKeyboardMoveCamera;
            @ScrollWheelZoom.started -= instance.OnScrollWheelZoom;
            @ScrollWheelZoom.performed -= instance.OnScrollWheelZoom;
            @ScrollWheelZoom.canceled -= instance.OnScrollWheelZoom;
        }

        public void RemoveCallbacks(IDollhouseViewActions instance)
        {
            if (m_Wrapper.m_DollhouseViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDollhouseViewActions instance)
        {
            foreach (var item in m_Wrapper.m_DollhouseViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DollhouseViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DollhouseViewActions @DollhouseView => new DollhouseViewActions(this);

    // MultiTouch
    private readonly InputActionMap m_MultiTouch;
    private List<IMultiTouchActions> m_MultiTouchActionsCallbackInterfaces = new List<IMultiTouchActions>();
    private readonly InputAction m_MultiTouch_Touch1Hold;
    private readonly InputAction m_MultiTouch_Touch2Hold;
    private readonly InputAction m_MultiTouch_Touch1Position;
    private readonly InputAction m_MultiTouch_Touch2Position;
    public struct MultiTouchActions
    {
        private @AppInputActions m_Wrapper;
        public MultiTouchActions(@AppInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch1Hold => m_Wrapper.m_MultiTouch_Touch1Hold;
        public InputAction @Touch2Hold => m_Wrapper.m_MultiTouch_Touch2Hold;
        public InputAction @Touch1Position => m_Wrapper.m_MultiTouch_Touch1Position;
        public InputAction @Touch2Position => m_Wrapper.m_MultiTouch_Touch2Position;
        public InputActionMap Get() { return m_Wrapper.m_MultiTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiTouchActions set) { return set.Get(); }
        public void AddCallbacks(IMultiTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_MultiTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MultiTouchActionsCallbackInterfaces.Add(instance);
            @Touch1Hold.started += instance.OnTouch1Hold;
            @Touch1Hold.performed += instance.OnTouch1Hold;
            @Touch1Hold.canceled += instance.OnTouch1Hold;
            @Touch2Hold.started += instance.OnTouch2Hold;
            @Touch2Hold.performed += instance.OnTouch2Hold;
            @Touch2Hold.canceled += instance.OnTouch2Hold;
            @Touch1Position.started += instance.OnTouch1Position;
            @Touch1Position.performed += instance.OnTouch1Position;
            @Touch1Position.canceled += instance.OnTouch1Position;
            @Touch2Position.started += instance.OnTouch2Position;
            @Touch2Position.performed += instance.OnTouch2Position;
            @Touch2Position.canceled += instance.OnTouch2Position;
        }

        private void UnregisterCallbacks(IMultiTouchActions instance)
        {
            @Touch1Hold.started -= instance.OnTouch1Hold;
            @Touch1Hold.performed -= instance.OnTouch1Hold;
            @Touch1Hold.canceled -= instance.OnTouch1Hold;
            @Touch2Hold.started -= instance.OnTouch2Hold;
            @Touch2Hold.performed -= instance.OnTouch2Hold;
            @Touch2Hold.canceled -= instance.OnTouch2Hold;
            @Touch1Position.started -= instance.OnTouch1Position;
            @Touch1Position.performed -= instance.OnTouch1Position;
            @Touch1Position.canceled -= instance.OnTouch1Position;
            @Touch2Position.started -= instance.OnTouch2Position;
            @Touch2Position.performed -= instance.OnTouch2Position;
            @Touch2Position.canceled -= instance.OnTouch2Position;
        }

        public void RemoveCallbacks(IMultiTouchActions instance)
        {
            if (m_Wrapper.m_MultiTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMultiTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_MultiTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MultiTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MultiTouchActions @MultiTouch => new MultiTouchActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnRotateView(InputAction.CallbackContext context);
        void OnRotateViewKeyborad(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnChangeHeight(InputAction.CallbackContext context);
    }
    public interface IDollhouseViewActions
    {
        void OnKeyboardMoveCamera(InputAction.CallbackContext context);
        void OnScrollWheelZoom(InputAction.CallbackContext context);
    }
    public interface IMultiTouchActions
    {
        void OnTouch1Hold(InputAction.CallbackContext context);
        void OnTouch2Hold(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch2Position(InputAction.CallbackContext context);
    }
}
